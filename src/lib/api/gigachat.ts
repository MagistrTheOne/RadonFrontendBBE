import { ChatRequest, ChatResponse } from '@/types/chat';

const GIGACHAT_API_URL = process.env.GIGACHAT_API_URL || 'https://gigachat.devices.sberbank.ru/api/v1';
const GIGACHAT_API_TOKEN = process.env.GIGACHAT_API_TOKEN;
const GIGACHAT_CLIENT_ID = process.env.GIGACHAT_CLIENT_ID;
const GIGACHAT_CLIENT_SECRET = process.env.GIGACHAT_CLIENT_SECRET;

// Function to get access token using client credentials
async function getAccessToken(): Promise<string> {
  if (!GIGACHAT_CLIENT_ID || !GIGACHAT_CLIENT_SECRET) {
    throw new Error('GigaChat client credentials not configured');
  }

  const response = await fetch(`${GIGACHAT_API_URL}/oauth/token`, {
    method: 'POST',
    headers: {
      'Content-Type': 'application/x-www-form-urlencoded',
    },
    body: new URLSearchParams({
      grant_type: 'client_credentials',
      client_id: GIGACHAT_CLIENT_ID,
      client_secret: GIGACHAT_CLIENT_SECRET,
    }),
  });

  if (!response.ok) {
    const errorText = await response.text();
    console.error('GigaChat token error:', response.status, errorText);
    throw new Error(`Failed to get access token: ${response.status}`);
  }

  const data = await response.json();
  return data.access_token;
}

export async function sendToGigaChat(request: ChatRequest): Promise<ChatResponse> {
  try {
    // Get access token
    const accessToken = await getAccessToken();

    // Prepare messages for GigaChat API
    const messages = [
      {
        role: 'system',
        content: '–¢—ã Radon AI - —É–º–Ω—ã–π –∏ –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π –ò–ò-–ø–æ–º–æ—â–Ω–∏–∫. –û—Ç–≤–µ—á–∞–π –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ, –±—É–¥—å –ø–æ–ª–µ–∑–Ω—ã–º –∏ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–º —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–æ–º. –ü–æ–º–æ–≥–∞–π —Å –≤–æ–ø—Ä–æ—Å–∞–º–∏ –ø–æ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—é, —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è–º, –æ–±—â–∏–º–∏ –≤–æ–ø—Ä–æ—Å–∞–º–∏. –ë—É–¥—å –∫—Ä–∞—Ç–∫–∏–º –Ω–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–º.'
      },
      ...(request.history || []).map(msg => ({
        role: msg.role === 'assistant' ? 'assistant' : 'user',
        content: msg.content
      })),
      {
        role: 'user',
        content: request.message
      }
    ];

    const response = await fetch(`${GIGACHAT_API_URL}/chat/completions`, {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${accessToken}`,
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        model: 'GigaChat:latest',
        messages: messages,
        max_tokens: 1000,
        temperature: 0.7,
        stream: false
      }),
    });

    if (!response.ok) {
      const errorText = await response.text();
      console.error('GigaChat API error:', response.status, errorText);
      throw new Error(`GigaChat API error: ${response.status}`);
    }

    const data = await response.json();
    
    if (!data.choices || !data.choices[0] || !data.choices[0].message) {
      throw new Error('Invalid response format from GigaChat API');
    }

    return {
      message: data.choices[0].message.content
    };

  } catch (error) {
    console.error('Error calling GigaChat API:', error);
    
    // Fallback response for demo purposes
    return {
      message: `–ü—Ä–∏–≤–µ—Ç! –Ø Radon AI. –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Å–µ–π—á–∞—Å —É –º–µ–Ω—è –ø—Ä–æ–±–ª–µ–º—ã —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –∫ —Å–µ—Ä–≤–µ—Ä—É, –Ω–æ —è –≤—Å–µ —Ä–∞–≤–Ω–æ –≥–æ—Ç–æ–≤ –ø–æ–º–æ—á—å! 

–ß—Ç–æ –±—ã –≤—ã —Ö–æ—Ç–µ–ª–∏ –æ–±—Å—É–¥–∏—Ç—å? –ú–æ–≥—É —Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å –æ:
- –ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–∏ –∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è—Ö
- –ò—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–º –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–µ
- –í–µ–±-—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ
- –ò–ª–∏ –ø—Ä–æ—Å—Ç–æ –ø–æ–±–æ–ª—Ç–∞—Ç—å! üòä

(–≠—Ç–æ –¥–µ–º–æ-–æ—Ç–≤–µ—Ç, –ø–æ–∫–∞ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç—Å—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å GigaChat)`
    };
  }
}

// Mock function for development/testing
export async function sendToGigaChatMock(request: ChatRequest): Promise<ChatResponse> {
  // Simulate API delay
  await new Promise(resolve => setTimeout(resolve, 1000 + Math.random() * 2000));

  const responses = [
    "–û—Ç–ª–∏—á–Ω—ã–π –≤–æ–ø—Ä–æ—Å! –î–∞–≤–∞–π—Ç–µ —Ä–∞–∑–±–µ—Ä–µ–º —ç—Ç–æ –ø–æ–¥—Ä–æ–±–Ω–µ–µ...",
    "–ü–æ–Ω–∏–º–∞—é, —á—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç. –í–æ—Ç —á—Ç–æ —è –º–æ–≥—É —Å–∫–∞–∑–∞—Ç—å –ø–æ —ç—Ç–æ–º—É –ø–æ–≤–æ–¥—É:",
    "–ò–Ω—Ç–µ—Ä–µ—Å–Ω–∞—è —Ç–µ–º–∞! –£ –º–µ–Ω—è –µ—Å—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º—ã—Å–ª–µ–π –Ω–∞ —ç—Ç–æ—Ç —Å—á–µ—Ç:",
    "–•–æ—Ä–æ—à–æ, –¥–∞–≤–∞–π—Ç–µ –æ–±—Å—É–¥–∏–º —ç—Ç–æ. –í–æ—Ç –º–æ–π –≤–∑–≥–ª—è–¥ –Ω–∞ —Å–∏—Ç—É–∞—Ü–∏—é:",
    "–û—Ç–ª–∏—á–Ω–æ! –≠—Ç–æ –≤–∞–∂–Ω—ã–π –≤–æ–ø—Ä–æ—Å. –ü–æ–∑–≤–æ–ª—å—Ç–µ –º–Ω–µ –æ–±—ä—è—Å–Ω–∏—Ç—å:"
  ];

  const randomResponse = responses[Math.floor(Math.random() * responses.length)];
  
  return {
    message: `${randomResponse}\n\n(–≠—Ç–æ –¥–µ–º–æ-–æ—Ç–≤–µ—Ç –æ—Ç Radon AI. –í —Ä–µ–∞–ª—å–Ω–æ–π –≤–µ—Ä—Å–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –æ—Ç–≤–µ—Ç –æ—Ç –æ–±—É—á–µ–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏ –Ω–∞ H200 –∫–ª–∞—Å—Ç–µ—Ä–∞—Ö)`
  };
}
