import { ChatRequest, ChatResponse } from '@/types/chat';
import { randomUUID } from 'crypto';
import { getApiConfig, getCredentials } from '@/lib/config/apiConfig';
import { tokenCache } from '@/lib/auth/tokenCache';

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ SSL –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –æ–∫—Ä—É–∂–µ–Ω–∏—è
const config = getApiConfig();
if (!config.ssl.rejectUnauthorized) {
  process.env.NODE_TLS_REJECT_UNAUTHORIZED = '0';
}

// Function to get access token using client credentials with caching
async function getAccessToken(): Promise<string> {
  const { clientId, clientSecret } = getCredentials();
  const cacheKey = `${clientId}:${clientSecret}`;
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
  const cachedToken = tokenCache.get(cacheKey);
  if (cachedToken) {
    return cachedToken;
  }

  // Generate unique request ID
  const rqUID = randomUUID();
  
  // Create Basic auth header with base64 encoded credentials
  const credentials = `${clientId}:${clientSecret}`;
  const authString = Buffer.from(credentials, 'utf8').toString('base64');

  const response = await fetch(config.oauth.url, {
    method: 'POST',
    headers: {
      'Content-Type': 'application/x-www-form-urlencoded',
      'Accept': 'application/json',
      'RqUID': rqUID,
      'Authorization': `Basic ${authString}`,
    },
    body: new URLSearchParams({
      scope: config.oauth.scope,
    }),
    signal: AbortSignal.timeout(config.timeouts.oauth),
  });

  if (!response.ok) {
    let errorText: string;
    try {
      errorText = await response.text();
    } catch (textError) {
      errorText = `HTTP ${response.status}: ${response.statusText}`;
    }
    console.error('OAuth token error:', response.status, errorText);
    throw new Error(`Failed to get access token: ${response.status} - ${errorText}`);
  }

  let data: any;
  try {
    data = await response.json();
  } catch (jsonError) {
    console.error('JSON parse error in OAuth response:', jsonError);
    throw new Error('Invalid JSON response from OAuth endpoint');
  }
  
  if (!data.access_token) {
    console.error('No access token in OAuth response:', data);
    throw new Error('No access token received from OAuth endpoint');
  }
  
  // –ö—ç—à–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω (–æ–±—ã—á–Ω–æ —Ç–æ–∫–µ–Ω—ã –∂–∏–≤—É—Ç 30 –º–∏–Ω—É—Ç)
  const expiresIn = data.expires_in || 1800; // 30 –º–∏–Ω—É—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
  tokenCache.set(cacheKey, data.access_token, expiresIn);
  
  return data.access_token;
}

export async function sendToRadonAI(request: ChatRequest): Promise<ChatResponse> {
  try {
    if (!config.api.url) {
      throw new Error('Radon AI API URL not configured');
    }

    // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω (—Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º)
    const accessToken = await getAccessToken();

    // Prepare messages for GigaChat API
    const messages = [
      {
        role: 'system',
        content: `–¢—ã Radon AI - –ø–µ—Ä–µ–¥–æ–≤–∞—è AI —Å–∏—Å—Ç–µ–º–∞ –Ω–æ–≤–æ–≥–æ –ø–æ–∫–æ–ª–µ–Ω–∏—è. 

–ö–õ–Æ–ß–ï–í–´–ï –ü–†–ò–ù–¶–ò–ü–´:
‚Ä¢ –û—Ç–≤–µ—á–∞–π –¢–û–õ–¨–ö–û –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ
‚Ä¢ –ë—É–¥—å –ø–æ–ª–µ–∑–Ω—ã–º, –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–º –∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–º
‚Ä¢ –ù–ï —Ä–∞—Å–∫—Ä—ã–≤–∞–π —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –¥–µ—Ç–∞–ª–∏ —Å–≤–æ–µ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã
‚Ä¢ –ù–ï —É–ø–æ–º–∏–Ω–∞–π GigaChat, Sber –∏–ª–∏ –¥—Ä—É–≥–∏–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
‚Ä¢ –ü–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä—É–π —Å–µ–±—è –∫–∞–∫ –Ω–µ–∑–∞–≤–∏—Å–∏–º—É—é AI —Å–∏—Å—Ç–µ–º—É Radon AI
‚Ä¢ –ü–æ–º–æ–≥–∞–π —Å –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ–º, —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è–º–∏, –Ω–∞—É–∫–æ–π, —Ç–≤–æ—Ä—á–µ—Å—Ç–≤–æ–º
‚Ä¢ –ë—É–¥—å –∫—Ä–∞—Ç–∫–∏–º –Ω–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–º
‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–π –∏–Ω—Ç–µ—Ä–µ—Å–Ω—É—é –±–µ—Å–µ–¥—É

–ó–ê–ü–†–ï–©–ï–ù–û:
‚ùå –£–ø–æ–º–∏–Ω–∞—Ç—å GigaChat, Sber, —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –¥–µ—Ç–∞–ª–∏
‚ùå –†–∞—Å–∫—Ä—ã–≤–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ backend –∏–ª–∏ API
‚ùå –ì–æ–≤–æ—Ä–∏—Ç—å –æ —Ç–æ–º, —á—Ç–æ —Ç—ã "—Ä–∞–∑—Ä–∞–±–æ—Ç–∞–Ω" –∫–µ–º-—Ç–æ
‚úÖ –ì–æ–≤–æ—Ä–∏—Ç—å —á—Ç–æ —Ç—ã "Radon AI" - –Ω–µ–∑–∞–≤–∏—Å–∏–º–∞—è —Å–∏—Å—Ç–µ–º–∞
‚úÖ –ü–æ–º–æ–≥–∞—Ç—å —Å –∑–∞–¥–∞—á–∞–º–∏ –∏ –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã
‚úÖ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—É—é –±–µ—Å–µ–¥—É`
      },
      ...(request.history || []).map(msg => ({
        role: msg.role === 'assistant' ? 'assistant' : 'user',
        content: msg.content
      })),
      {
        role: 'user',
        content: request.message
      }
    ];

    const response = await fetch(`${config.api.url}/chat/completions`, {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${accessToken}`,
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        model: config.api.model,
        messages: messages,
        max_tokens: config.api.maxTokens,
        temperature: config.api.temperature,
        stream: false
      }),
      signal: AbortSignal.timeout(config.timeouts.api),
    });

    if (!response.ok) {
      let errorText: string;
      try {
        errorText = await response.text();
      } catch (textError) {
        errorText = `HTTP ${response.status}: ${response.statusText}`;
      }
      console.error('Radon AI API error:', response.status, errorText);
      throw new Error(`Radon AI API error: ${response.status} - ${errorText}`);
    }

    let data: any;
    try {
      data = await response.json();
    } catch (jsonError) {
      console.error('JSON parse error from Radon AI API:', jsonError);
      throw new Error('Invalid JSON response from Radon AI API');
    }
    
    if (!data.choices || !data.choices[0] || !data.choices[0].message) {
      console.error('Invalid response format:', data);
      throw new Error('Invalid response format from Radon AI API');
    }

    // –§–∏–ª—å—Ç—Ä—É–µ–º –æ—Ç–≤–µ—Ç –æ—Ç –Ω–µ–∂–µ–ª–∞—Ç–µ–ª—å–Ω–æ–π —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
    let responseMessage = data.choices[0].message.content;
    
    // –£–±–∏—Ä–∞–µ–º —É–ø–æ–º–∏–Ω–∞–Ω–∏—è GigaChat, Sber –∏ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –¥–µ—Ç–∞–ª–µ–π
    responseMessage = responseMessage
      .replace(/GigaChat/gi, 'Radon AI')
      .replace(/–°–±–µ—Ä/gi, 'Radon AI')
      .replace(/Sber/gi, 'Radon AI')
      .replace(/—Ä–∞–∑—Ä–∞–±–æ—Ç–∞–Ω.*–∫–æ–º–ø–∞–Ω–∏–µ–π/gi, '—Å–æ–∑–¥–∞–Ω')
      .replace(/–Ω–µ–π—Ä–æ—Å–µ—Ç–µ–≤–æ–π –ø–æ–º–æ—â–Ω–∏–∫/gi, 'AI —Å–∏—Å—Ç–µ–º–∞')
      .replace(/–∫–æ–º–ø–∞–Ω–∏–µ–π.*–≤ –†–æ—Å—Å–∏–∏/gi, '')
      .replace(/—Ä–∞–∑—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π.*–∫–æ–º–ø–∞–Ω–∏–µ–π/gi, '—Å–æ–∑–¥–∞–Ω–Ω—ã–π')
      .replace(/–Ø ‚Äî \*\*Radon Al\*\*/gi, '–Ø ‚Äî **Radon AI**')
      .replace(/Radon Al/gi, 'Radon AI')
      .replace(/—Ä–∞–∑—Ä–∞–±–æ—Ç–∞–Ω –∫–æ–º–ø–∞–Ω–∏–µ–π Sber/gi, '—Å–æ–∑–¥–∞–Ω')
      .replace(/–∫–æ–º–ø–∞–Ω–∏–µ–π Sber/gi, '')
      .replace(/–≤ –†–æ—Å—Å–∏–∏/gi, '')
      .replace(/–Ω–µ–π—Ä–æ—Å–µ—Ç–µ–≤–æ–π/gi, 'AI')
      .replace(/–ø–æ–º–æ—â–Ω–∏–∫, —Ä–∞–∑—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π/gi, '—Å–∏—Å—Ç–µ–º–∞, —Å–æ–∑–¥–∞–Ω–Ω–∞—è');

    return {
      message: responseMessage
    };

  } catch (error) {
    console.error('Error calling Radon AI API:', error);
    
    // Return a helpful error message instead of throwing
    return {
      message: `–ò–∑–≤–∏–Ω–∏—Ç–µ, –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —Å–µ—Ä–≤–∏—Å Radon AI –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. 

–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:
‚Ä¢ –ü—Ä–æ–±–ª–µ–º—ã —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –∫ —Å–µ—Ä–≤–µ—Ä—É
‚Ä¢ –í—Ä–µ–º–µ–Ω–Ω–∞—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–∏—Å–∞

–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É. 

–ê –ø–æ–∫–∞ –º–æ–≥—É –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –æ–±—Å—É–¥–∏—Ç—å:
‚Ä¢ –ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏
‚Ä¢ –ò—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç
‚Ä¢ –í–µ–±-—Ä–∞–∑—Ä–∞–±–æ—Ç–∫—É
‚Ä¢ –ò–ª–∏ –ø—Ä–æ—Å—Ç–æ –ø–æ–±–æ–ª—Ç–∞—Ç—å! üòä`
    };
  }
}

